################################################################################
# Reusable build workflow
################################################################################

name: Build

on:
  workflow_call:
    inputs:
      bits:
        description: Either 32 or 64
        required: true
        type: string
      type:
        description: CMake build type
        required: true
        type: string
    outputs:
      artifact_name:
        description: Name of the resulting artifact
        value: ${{ jobs.windows_msvc.outputs.artifact_name }}

jobs:
  windows_msvc:
    runs-on: windows-latest
    env:
      BUILD_DIR: ${{ github.workspace }}\Build${{ inputs.bits }}
    outputs:
      artifact_name: ${{ steps.build.outputs.artifact_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # for version generator
          fetch-depth: 0

      - name: Build
        id: build
        run: |
          $vs_path = & 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' `
            -latest -property installationPath
          Import-Module (Join-Path $vs_path 'Common7\Tools\Microsoft.VisualStudio.DevShell.dll')
          $arch = if (${{ inputs.bits }} -eq 32) { 'x86' } else { 'amd64' }
          Enter-VsDevShell -VsInstallPath $vs_path -SkipAutomaticLocation -Arch $arch
          cmake -S . -B $env:BUILD_DIR -G Ninja -D CMAKE_BUILD_TYPE=${{ inputs.type }}
          cmake --build $env:BUILD_DIR
          $exe_path = Join-Path $env:BUILD_DIR 'CryMP-Client${{ inputs.bits }}.exe'
          $version = git describe --dirty --tags --match 'v*'
          'artifact_name=CryMP-Client${{ inputs.bits }}-' + $version >> $env:GITHUB_OUTPUT

      - name: Sign
        if: github.repository_owner == 'crymp-net'
        run: |
          Set-Content -Path bundle.txt -Value '${{ secrets.CODE_SIGNING_PFX }}'
          certutil -decode bundle.txt bundle.pfx
          & 'C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe' `
            sign /fd SHA256 /f bundle.pfx /p '${{ secrets.CODE_SIGNING_PFX_PASSWORD }}' `
            /tr 'http://timestamp.digicert.com' /td SHA256 `
            (Get-Item (Join-Path $env:BUILD_DIR '*.exe')).FullName
          Remove-Item bundle.*

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact_name }}
          path: |
            ${{ env.BUILD_DIR }}/*.exe
            ${{ env.BUILD_DIR }}/*.pdb
